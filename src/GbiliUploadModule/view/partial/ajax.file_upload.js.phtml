<?php if (!isset($view)) : ?>
    <?php throw new \Exception('You need to set the $view variable in order to use this script') ?>
<?php endif ?>

<?php $view->scriptalicious()->addSrc('jQuery', '/js/jquery-ui-1.10.4.custom.min.js') ?>
<?php $view->scriptalicious()->addSrc('jquery_form', '/js/jquery.form.js')
                             ->addDependency('jquery_form', 'jQuery') ?>
<?php /* Make sure to copy paste gbili_event (https://github.com/gbili/event/src/gbili.js to public dir from host module */ ?>

<?php $view->scriptalicious()->addSrc('gbili_event', '/js/gbili/event.js') ?>
<?php $view->scriptalicious()->addSrc('gbili_ajaxform', '/js/gbili/ajaxform.js')
                             ->addDependency('gbili_ajaxform', 'jquery_form')
                             ->addDependency('gbili_ajaxform', 'gbili_event') ?>
<?php $view->scriptalicious()->addSrc('gbili_poll', '/js/gbili/poll.js') ?>

<?php $fileInputName          = $this->getService()->getFileInputName() ?>
<?php $formId                 = $this->getService()->getFormId() ?>
<?php $messageUploadComplete  = $view->translate('Complete!') ?>
<?php $messageUploading       = $view->translate('Uploading...') ?>
<?php $messageReset           = $view->translate('Click the "Upload" button when you are ready.') ?>
<?php $messageNoFilesSelected = $view->translate('You need to click "Browse" button, and select some files to upload.') ?>

<?php ob_start()?>
<script type="text/javascript">
/* Filename: <?= __FILE__ ?> */

// TODO XSS 
function showMessages(messages) {
    var message = '';
    <?php //Either add the messages in the popup or in the messages container ?>
    var container = $('#<?= (($this->service->isFormDisplayedAsPopup())? $this->popupDivId . ' .messages' : 'messages')?>');

    for( key in messages ) {
        dismissButton = '<button type="button" class="close" data-dismiss="alert" aria-hidden="true">Ã—</button>';
        message = '<div class="alert alert-dismissable alert-' + messages[key].class + '">' + dismissButton + '<p><strong>' + messages[key].fileName + '</strong>: ' + messages[key].message + '</p></div>';
        container.html(container.html() + message);
    }
}

(function() {

    var switchCssClass,
        resetProgressBar,
        statusToCssClassMap,
        handleValidResponseEvent,
        parseBadRequestResponseEvent,
        responseStatus,
        setEventListenerClickBrowseButton;

    // Make the form Ajax capable
    gbili.ajaxForm.create({
        formCssSelector: '#<?= $formId ?>',
        fileInput: $('#<?= $fileInputName ?>'),
    });

    switchCssClass = function (cssClass) {
        $('#gbiliuploader-progress .progress .progress-bar')
            .removeClass('progress-bar-primary')
            .removeClass('progress-bar-warning')
            .removeClass('progress-bar-danger')
            .addClass('progress-bar-' + cssClass );
    };

    resetProgressBar = function() {
        $('#gbiliuploader-progress .progress .progress-bar').width('0%');
        $('#gbiliuploader-progress > p').html('<?= $messageReset ?>');
        switchCssClass('primary');
    };

    // Listen to the form submit start event and start polling the server for upload progress 
    gbili.event.addListener('#<?= $formId ?>.submit.start', function(event) { //startProgress
        gbili.poll.start({
            baseUrl: '/upload_progress.php/?id=', 
            progressCssSelector: '#progress_key',
            showProgressCallback: function (amount, message) {
                $('#gbiliuploader-progress').show();
                $('#gbiliuploader-progress .progress .progress-bar').width(amount + '%');
                $('#gbiliuploader-progress > p').html(message);
            }, 
            clrearProgresCallback: resetProgressBar,
        });
    });

    statusToCssClassMap = {success: 'success', partial: 'warning', fail: 'danger',};

    handleValidResponseEvent = function (event) {
        switchCssClass(statusToCssClassMap[event.name.split('.').pop()]);
        showMessages(event.response.messages);
    };

    // Add listeners for valid responses
    for (responseStatus in statusToCssClassMap) {
        gbili.event.addListener('#<?= $formId ?>.submit.success.response.valid.' + responseStatus, handleValidResponseEvent, 1);
    }

    parseBadRequestResponseEvent = function (event) {
        var reponse = event.params.response;
        var scriptRegex = /<script id="gbiliupm-badrequest-messages">(.+)<\/script>/i;
        var matches = response.match(scriptRegex);
        if (null === matches) {
            alert('Application Error, The response is not well formatted');
            return;
        }
        messages = JSON && JSON.parse(matches[1]) || $.parseJSON(matches[1]);
        showMessages(messages);
    };

    gbili.event.addListener('#<?= $formId ?>.submit.success.response.notValid', parseBadRequestResponseEvent);

    attachEventListenerClickBrowseButton = function() {
        // Register a on click event on the file input button.
        $('#<?= $fileInputName ?>').on('click', resetProgressBar);
    };

    gbili.event.addListener('#<?= $formId ?>.submit.success.after', attachEventListenerClickBrowseButton, 100);

    attachEventListenerClickBrowseButton();
})();
</script>
<?php $ajax_file_upload = ob_get_clean() ?>

<?php $view->scriptalicious()->addInline('gbiliuploader_ajax_file_upload', $ajax_file_upload)
           ->addDependency('gbiliuploader_ajax_file_upload', 'jquery_form')
           ->addDependency('gbiliuploader_ajax_file_upload', 'gbili_event')
           ->addDependency('gbiliuploader_ajax_file_upload', 'gbili_ajaxform')
           ->addDependency('gbiliuploader_ajax_file_upload', 'gbili_poll') ?>
