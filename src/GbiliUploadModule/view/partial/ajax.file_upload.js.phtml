<?php if (!isset($view)) : ?>
    <?php throw new \Exception('You need to set the $view variable in order to use this script') ?>
<?php endif ?>

<?php $view->scriptalicious()->addSrc('jQuery', '/js/jquery-ui-1.10.4.custom.min.js') ?>
<?php $view->scriptalicious()->addSrc('jquery_form', '/js/jquery.form.js')
                             ->addDependency('jquery_form', 'jQuery') ?>
<?php /* Make sure to copy paste gbili_event (https://github.com/gbili/event/src/gbili.js to public dir from host module */ ?>

<?php $view->scriptalicious()->addSrc('gbili_event', '/js/gbili/event.js') ?>
<?php $view->scriptalicious()->addSrc('gbili_ajaxform', '/js/gbili/ajaxform.js')
                             ->addDependency('gbili_ajaxform', 'jquery_form')
                             ->addDependency('gbili_ajaxform', 'gbili_event') ?>
<?php $view->scriptalicious()->addSrc('gbili_poll', '/js/gbili/poll.js') ?>

<?php $fileInputName          = $this->getService()->getFileInputName() ?>
<?php $formId                 = $this->getService()->getFormId() ?>
<?php $messageUploadComplete  = $view->translate('Complete!') ?>
<?php $messageUploading       = $view->translate('Uploading...') ?>
<?php $messageReset           = $view->translate('Click the "Upload" button when you are ready.') ?>
<?php $messageNoFilesSelected = $view->translate('You need to click "Browse" button, and select some files to upload.') ?>

<?php ob_start()?>
<script type="text/javascript">
/* Filename: <?= __FILE__ ?> */

gbili = gbili || {};
gbili.upm = gbili.upm || {};

gbili.upm.progressBar = function() {
    var switchCssClass,
        resetProgressBar,
        showProgressCallback,
        // Element holding the upload id in the server
        uploadIdElement;

    switchCssClass = function (cssClass) {
        $('#gbiliuploader-progress .progress .progress-bar')
            .removeClass('progress-bar-primary')
            .removeClass('progress-bar-warning')
            .removeClass('progress-bar-danger')
            .addClass('progress-bar-' + cssClass );
    };

    resetProgressBar = function() {
        $('#gbiliuploader-progress .progress .progress-bar').width('0%');
        $('#gbiliuploader-progress > p').html('<?= $messageReset ?>');
        switchCssClass('primary');
    };

    showProgressCallback = function (amount, message) {
        $('#gbiliuploader-progress').show();
        $('#gbiliuploader-progress .progress .progress-bar').width(amount + '%');
        $('#gbiliuploader-progress > p').html(message);
    };

    return {
        switchCssClass: switchCssClass,
        reset: resetProgressBar,
        show: showProgressCallback,
        getUploadId: function() {
            if (!uploadIdElement) {
                uploadIdElement = $('#progress_key');
            }
            return uploadIdElement.val();
        },
    };
}();

gbili.upm.messages = {
    //Either add the messages in the popup or in the messages container
    show: function(messages) {
        var message = '';
        var container = $('#<?= (($this->service->isFormDisplayedAsPopup())? $this->popupDivId . ' .messages' : 'messages')?>');

        for( key in messages ) {
            dismissButton = '<button type="button" class="close" data-dismiss="alert" aria-hidden="true">Ã—</button>';
            message = '<div class="alert alert-dismissable alert-' + messages[key].class + '">' + dismissButton + '<p><strong>' + messages[key].fileName + '</strong>: ' + messages[key].message + '</p></div>';
            container.html(container.html() + message);
        }
    },

    // If messages are packed in a script tag try to parse them and present them
    // the json encoded string
    showScriptTagResponse: function (event) {
        var messages,
            scriptRegex = /<script id="gbiliupm-badrequest-messages">(.+)<\/script>/i;
        var matches = event.params.response.match(scriptRegex);
        if (null === matches) {
            alert('Application Error, The response is not well formatted');
            return;
        }
        messages = JSON && JSON.parse(matches[1]) || $.parseJSON(matches[1]);
        this.show(messages);
    },
};

gbili.upm.fileUpload = (function() {
    
    // Make the form Ajax capable
    gbili.ajaxForm.create({
        formCssSelector: '#<?= $formId ?>',
        fileInput: $('#<?= $fileInputName ?>'),
    });

    // Listen to the form no file event 
    gbili.event.addListener('#<?= $formId ?>.no_file_selected_abort?', function(event) { //startProgress
        alert('<?= $messageNoFilesSelected?>');
    }, 1);

    // Listen to the form submit start event and start polling the server for upload progress 
    gbili.event.addListener('#<?= $formId ?>.submit.start', function(event) { //startProgress
        gbili.poll.start({
            baseUrl: '/upload_progress.php?id=', 
            progressBar: gbili.upm.progressBar, 
        });
    });
    gbili.event.addListener('#<?= $formId ?>.submit.after', function(event) {
        gbili.poll.stop();
    });

    //Attach valid response event listeners
    (function () {
        var statusToCssClassMap = {success: 'success', partial: 'warning', fail: 'danger',};

        var handleValidResponseEvent = function (event) {
            gbili.upm.progressBar.switchCssClass(statusToCssClassMap[event.name.split('.').pop()]);
            gbili.upm.messages.show(event.params.response.messages);
        };

        var responseStatus;
        // Add listeners for valid responses
        for (responseStatus in statusToCssClassMap) {
            gbili.event.addListener('#<?= $formId ?>.submit.success.response.valid.' + responseStatus, handleValidResponseEvent, 1);
        }
    })();

    // Parse the script and get the messages from 
    gbili.event.addListener('#<?= $formId ?>.submit.success.response.notValid', gbili.upm.messages.showScriptTagResponse);

    onFileInputClickResetProgressBar = function() {
        // Register a on click event on the file input button.
        $('#<?= $fileInputName ?>').on('click', gbili.upm.progressBar.reset);
    };

    // Add event listener after popup has been changed
    gbili.event.addListener('#<?= $formId ?>.submit.after', onFileInputClickResetProgressBar, 101);

    onFileInputClickResetProgressBar();
})();
</script>
<?php $ajax_file_upload = ob_get_clean() ?>

<?php $view->scriptalicious()->addInline('gbiliuploader_ajax_file_upload', $ajax_file_upload)
           ->addDependency('gbiliuploader_ajax_file_upload', 'jquery_form')
           ->addDependency('gbiliuploader_ajax_file_upload', 'gbili_event')
           ->addDependency('gbiliuploader_ajax_file_upload', 'gbili_ajaxform')
           ->addDependency('gbiliuploader_ajax_file_upload', 'gbili_poll') ?>
